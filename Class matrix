import java.util.*;
import java.math.*;
public class Main
{

    public static long[][] adjoint(long[][] brr,int n)
    {
        long[][] arr=new long[n][n];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                arr[i][j]=(long)(Math.pow(-1,i+j)*det(find(brr,n,i,j),n-1));
            }
        }
        return transpose(arr,n);
    }
    public static long[][] transpose(long[][] arr,int n)
    {
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                long x=arr[i][j];
                arr[i][j]=arr[j][i];
                arr[j][i]=x;
            }
        }
        return arr;
    }
	public static long[][] multiply(long[][] arr,int a,int b,long[][] brr,int c,int d)
	{
	    if(b!=c)
	    return null;
	    long[][] crr=new long[a][d];
	    for(int i=0;i<a;i++)
	    {
	        for(int j=0;j<d;j++)
	        {
	            crr[i][j]=0;
	            for(int k=0;k<b;k++)
	            {
	                crr[i][j]+=arr[i][k]*brr[k][j];
	            }
	            System.out.print(crr[i][j]+" ");
	        }
	        System.out.println("");
	    }
	    return crr;
	}
	public static long determinant(long[][] arr,int n)
	{
	    long ans=0;
	    ///   Base Case  ///
	    
	    if(n==1)
	    {
	        return arr[0][0];
	    }
	    
	    
	    /// Recursive Part ///
	    
	   int i=0;
	        for(int j=0;j<n;j++)
	        {
	            long p=det(find(arr,n,i,j),n-1);
	            ans+=(((long)Math.pow(-1,i+1+j+1))*arr[i][j]*p);
	        }
	    return ans;
	}
	private static long[][] find(long[][] arr,int n ,int r,int c)
	{
	    long[][] brr=new long[n-1][n-1];
	    ArrayList<Long> list=new ArrayList();
	    for(int i=0;i<n;i++)
	    {
	        for(int j=0;j<n;j++)
	        {
	            if((i!=r)&&(j!=c))
	            list.add(arr[i][j]);
	        }
	    }
	    int k=0;
	    for(int i=0;i<n-1;i++)
	    {  
	        for(int j=0;j<n-1;j++)
	            {
	                brr[i][j]=list.get(k++);
	            }
	    }
	    return brr;
	}
	public static long  mulmodinv(long p,long mod) throws Exception
	{
	    //     a*x+b*y=c  ->  p*x+mod*y=1
	    if(gcd(p,mod)!=1)
	    throw new Exception("multiplicative modulo inverse not exist exception");
	    else
	    {
	        long[] arr=extendEuclid(p,mod);
	        return (arr[0]+mod)%mod;
	    }
	}
	public static long[] extendEuclid(long a,long b)
    {
            /****** a*x+b*y=gcd(a,b) *************/
            long[] ans=new long[2];
            if(b==0)
            {
                ans[0]=1;ans[1]=0;
                return ans;
            }
            else
            {
                ans=extendEuclid(b,a%b);
                long x=ans[0],y=ans[1];
                ans[0]=y;
                ans[1]=x-((a/b)*y);
                return ans;
            }
        }
	public static long  gcd(long a,long b)
	{
	    return b==0?a:gcd(b,a%b);
	}

}
