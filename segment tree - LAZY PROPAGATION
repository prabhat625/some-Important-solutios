/******************************************************************************
     Segment tree lazy propagation problem in spoj:- UPDATE IT
     My solution is general for all query of type "sum of values in l to r"
     Note:-
     remember :- fast io 
*******************************************************************************/
import java.util.*;
import java.io.*;
public class Main
{
	public static void main(String[] args) throws Exception {
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		StringBuilder str=new StringBuilder();
		int t=Integer.parseInt(br.readLine());
		while(t-->0)
		{
		    String[] innr=br.readLine().split("\\s+");
		    int n=Integer.parseInt(innr[0]);
		    int u=Integer.parseInt(innr[1]);
		    long[] seg=new long[4*n+1];
		    long[] lazy=new long[4*n+1];
		    while(u-->0)
		    {
		        innr=br.readLine().split("\\s+");
		        int l=Integer.parseInt(innr[0]);
		        int r=Integer.parseInt(innr[1]);
		        int v=Integer.parseInt(innr[2]);
		        update(l,r,v,seg,lazy,1,0,n-1);
		    }
		    int q=Integer.parseInt(br.readLine());
		    while(q-->0)
		    {
		        int x=Integer.parseInt(br.readLine());
		        str.append(query(x,x,seg,lazy,1,0,n-1,0)+"\n");
		    }
		}
		PrintWriter pw=new PrintWriter(System.out);
		pw.println(str);
		pw.flush();
		pw.close();
	}
	public static void update(int l,int r,long val,long[] seg,long[] lazy,int ind,int start,int end)
	{
	    if(r<start||l>end)
	    return;
	    if(l<=start&&r>=end)
	        lazy[ind]+=val;
	    else
	    {
	        update(l,r,val,seg,lazy,2*ind,start,(start+end)/2);
	        update(l,r,val,seg,lazy,2*ind+1,(start+end)/2+1,end);
	    }
	}
	public static long query(int l,int r,long[] seg,long[] lazy,int ind,int start,int end,long temp)
	{
	    // temp will hold the unresolve lazy value go to the depth
	    if(r<start||l>end)
	    return 0;
	    if(l<=start&&r>=end)
	    return temp+lazy[ind];
	    else 
	    {
	        long x=query(l,r,seg,lazy,2*ind,start,(start+end)/2,temp+lazy[ind]);
	        long y=query(l,r,seg,lazy,2*ind+1,(start+end)/2+1,end,temp+lazy[ind]);
	        return x+y;
	    }
	    
	}
}
